{"version":3,"sources":["../src/index.js"],"names":["test","mongoose","version","Promise","connect","jest","fn","mockImplementation","resolve","createConnection","mockReturnValue","on","once","then","catch","model","bind","ops","mockedReturn","cb","op","modelName","_mongooseOptions","Model","mock","mockingoose","__mocks","err","Error","Function","includes","Array","isArray","map","item","lean","toObject","forEach","Query","prototype","criteria","doc","options","callback","merge","arguments","length","undefined","exec","call","Aggregate","_model","aggregate","instance","methodName","constructor","Object","assign","hooks","reject","execPre","ret","execPost","doMock","target","resetAll","toJSON","traps","get","prop","hasOwnProperty","Reflect","toReturn","o","reset","Proxy"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\n\nif(!/^5/.test(mongoose.version)) mongoose.Promise = Promise;\n\nmongoose.connect = jest.fn().mockImplementation(() => Promise.resolve());\nmongoose.createConnection = jest\n  .fn()\n  .mockReturnValue({\n    on: jest.fn(),\n    once: jest.fn(),\n    then(resolve) { return Promise.resolve(resolve(this)); },\n    catch() {},\n    model: mongoose.model.bind(mongoose),\n  });\n\nconst ops = [\n  'find',\n  'findOne',\n  'count',\n  'countDocuments',\n  'estimatedDocumentCount',\n  'distinct',\n  'findOneAndUpdate',\n  'findOneAndDelete',\n  'findOneAndRemove',\n  'findOneAndReplace',\n  'remove',\n  'update',\n  'deleteOne',\n  'deleteMany',\n];\n\nconst mockedReturn = async function (cb) {\n  const { op, model: { modelName }, _mongooseOptions = {} } = this;\n  const Model = mongoose.model(modelName);\n\n  let mock = mockingoose.__mocks[modelName] && mockingoose.__mocks[modelName][op];\n\n  let err = null;\n\n  if (mock instanceof Error) err = mock;\n\n  if (mock instanceof Function) mock = await mock(this);\n\n  if (!mock && op === 'save') { mock = this;}\n\n  if (mock && mock instanceof Model === false && (!['update', 'count', 'countDocuments', 'estimatedDocumentCount'].includes(op))) {\n    mock = Array.isArray(mock) ? mock.map(item => new Model(item)) : new Model(mock);\n\n    if (_mongooseOptions.lean) mock = Array.isArray(mock) ? mock.map(item => item.toObject()) : mock.toObject();\n  }\n\n  if (cb) return cb(err, mock);\n\n  if (err) throw err;\n\n  return mock;\n};\n\nops.forEach(op => {\n  mongoose.Query.prototype[op] = jest.fn().mockImplementation(function (criteria, doc, options, callback) {\n    if ([\n        'find', 'findOne', 'count', 'countDocuments', \n        'remove', 'deleteOne', 'deleteMany', 'findOneAndUpdate',\n        'findOneAndRemove', 'findOneAndDelete', 'findOneAndReplace'\n      ].includes(op) && typeof criteria !== 'function') {\n      // find and findOne can take conditions as the first paramter\n      // ensure they make it into the Query conditions\n      this.merge(criteria);\n    }\n\n    if (['distinct'].includes(op) && typeof doc !== 'function') {\n      // distinct has the conditions as the second parameter\n      this.merge(doc);\n    }\n\n    switch (arguments.length) {\n      case 4:\n      case 3:\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n        break;\n      case 2:\n        if (typeof doc === 'function') {\n          callback = doc;\n          doc = criteria;\n          criteria = undefined;\n        }\n        options = undefined;\n        break;\n      case 1:\n        if (typeof criteria === 'function') {\n          callback = criteria;\n          criteria = options = doc = undefined;\n        } else {\n          doc = criteria;\n          criteria = options = undefined;\n        }\n    }\n\n    this.op = op;\n\n    if (!callback) return this;\n\n    return this.exec.call(this, callback);\n  });\n});\n\nmongoose.Query.prototype.exec = jest.fn().mockImplementation(function cb(cb) {\n  return mockedReturn.call(this, cb);\n});\n\nmongoose.Aggregate.prototype.exec = jest.fn().mockImplementation(async function cb(cb) {\n\tconst { _model: { modelName } } = this;\n\n\tlet mock = mockingoose.__mocks[modelName] && mockingoose.__mocks[modelName].aggregate;\n\n\tlet err = null;\n\n  if (mock instanceof Error) err = mock;\n  \n  if (mock instanceof Function) mock = await mock(this);\n\n\tif (cb) return cb(err, mock);\n\n\tif (err) throw err;\n\n\treturn mock;\n});\n\nconst instance = [\n  'remove',\n  'save'\n];\n\ninstance.forEach(methodName => {\n  mongoose.Model.prototype[methodName] = jest.fn().mockImplementation(function (options, cb) {\n    const op = methodName;\n    const { modelName } = this.constructor;\n\n    if (typeof options === 'function') cb = options;\n\n    Object.assign(this, { op, model: { modelName } });\n\n    const hooks = this.constructor.hooks\n\n    return new Promise((resolve, reject) => {\n      hooks.execPre(op, this, [cb], (err) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        const ret = mockedReturn.call(this, cb);\n\n        if (cb) {\n          hooks.execPost(op, this, [ret], (err) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n\n            resolve(ret);\n          });\n        } else {\n          ret\n            .then((ret) => {\n              hooks.execPost(op, this, [ret], (err) => {\n                if (err) {\n                  reject(err);\n                  return;\n                }\n\n                resolve(ret);\n              });\n            })\n            .catch(reject);\n        }\n      });\n    });\n  });\n});\n\njest.doMock('mongoose', () => mongoose);\n\nconst target = {\n  __mocks: {},\n  resetAll() { this.__mocks = {}; },\n  toJSON() { return this.__mocks; },\n};\n\nconst traps = {\n  get(target, prop) {\n    if (target.hasOwnProperty(prop)) return Reflect.get(target, prop);\n\n    return {\n      toReturn(o, op = 'find') {\n        target.__mocks.hasOwnProperty(prop)\n          ? target.__mocks[prop][op] = o\n          : target.__mocks[prop] = { [op]: o };\n\n        return this;\n      },\n\n      reset(op) {\n        op && delete target.__mocks[prop][op] || delete target.__mocks[prop];\n\n        return this;\n      },\n\n      toJSON() {\n        return target.__mocks[prop] || {};\n      },\n    };\n  },\n};\n\nconst mockingoose = new Proxy(target, traps);\n\nexport default mockingoose;\n"],"file":"index.js"}